pipeline {
    agent {label 'slave'}

    environment {
        GIT_BRANCH = 'main'  // Define the branch as a variable
        REPO_URL = 'https://github.com/msh-r/demo-edureka.git'  // Set your Git repository URL
        DOCKER_IMAGE = "hr67/abc_tech"  // Docker image name
        TAG = "build-${BUILD_NUMBER}"
        //REGISTRY = "docker.io"  // Container registry
        KUBE_MASTER = "ubuntu@54.163.175.175"  // Your K8s master node
        //KUBE_CONFIG_PATH = "/home/ubuntu/.kube/config"  // Path to your kubeconfig file on the master
        
    }

    stages {
        stage('Git Clone') {
            steps {
                script {
                    sh 'rm -rf ${WORKSPACE}/target/*'
                    git branch: "${GIT_BRANCH}", url: "${REPO_URL}"
                }
            }
        }

        stage('Maven Compile') {
            steps {
                script {
                    sh 'mvn clean compile'
                }
            }
        }
        stage('Unit Test') {
            steps {
                script {
                    sh 'mvn test'
                }
            }
        }
        stage('Code Package') {
            steps {
                script {
                    sh 'mvn package'
                }
            }
        }
        stage('Build Docker Image'){
			steps{
			    sh "cp ${WORKSPACE}/target/ABCtechnologies-1.0.war ${WORKSPACE}/ABCtechnologies-1.0.war"
                sh 'docker ps -aq | xargs -r docker stop'
                sh 'docker ps -aq | xargs -r docker rm'
                sh 'docker images "hr67/abc_tech*" -q | xargs -r docker rmi'
                sh "docker build -t ${DOCKER_IMAGE}:${TAG} ."

			}
		}
        stage('Push Docker Image'){ 
			    steps{   
			        withDockerRegistry([ credentialsId: "dockercreds", url: "" ]){
			        sh "docker push ${DOCKER_IMAGE}:${TAG}"
				    }
			    }
		}
		stage('Send Files from Agent to Kube Master') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'edureka3', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        // Ensure destination directories exist on the master node
                        // Copy the files from the Jenkins agent to the master node
                        sh '''
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} "mkdir -p /home/ubuntu/k8s && sudo chown -R ubuntu:ubuntu /home/ubuntu/k8s/"
                            scp -i $SSH_KEY -o StrictHostKeyChecking=no ${WORKSPACE}/deployment-template.yaml ${KUBE_MASTER}:/home/ubuntu/k8s/deployment-template.yaml
                            scp -i $SSH_KEY -o StrictHostKeyChecking=no ${WORKSPACE}/deployment.yaml ${KUBE_MASTER}:/home/ubuntu/k8s/deployment.yaml
                            scp -i $SSH_KEY -o StrictHostKeyChecking=no ${WORKSPACE}/service.yaml ${KUBE_MASTER}:/home/ubuntu/k8s/service.yaml
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} "ls -ltra /home/ubuntu/k8s/"
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'edureka3', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        // SSH into Kubernetes Master and run kubectl commands separately
                        sh '''
                            
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} \\
                            "sed 's|__TAG__|${TAG}|g' /home/ubuntu/k8s/deployment-template.yaml > /home/ubuntu/k8s/deployment.yaml"
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} "kubectl delete deployment my-app || true"
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} "kubectl get pods -l app=my-app -o name | xargs kubectl delete --force --grace-period=0"
                            echo "Deleted old Deployment and pods , Running the new Deployment"
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} "kubectl apply -f /home/ubuntu/k8s/deployment.yaml"
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${KUBE_MASTER} "kubectl apply -f /home/ubuntu/k8s/service.yaml"
                        '''
                    }
                }
            }
        }
    }
}
